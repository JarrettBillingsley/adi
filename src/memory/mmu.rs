
use std::fmt::{ Debug, Display };

use parse_display::Display;
use enum_dispatch::enum_dispatch;

use crate::program::{ Instruction };
use crate::memory::{ VA, Location };
use crate::platform::{ NesMmu };

/// Newtype for MMU configuration state. The interpretation of this type is up to each
/// implementor of `IMmu`.
#[derive(Debug, Default, PartialEq, Eq, Copy, Clone)]
pub struct MmuState(u128);

impl MmuState {
	pub fn from_usize(v: usize) -> Self {
		Self(v as u128)
	}

	pub fn to_usize(&self) -> usize {
		self.0 as usize
	}
}

#[enum_dispatch]
#[derive(Debug, Display)]
pub enum Mmu {
	#[display("{0}")]
	NesMmu,
}

/// How an instruction can possibly change the state of an MMU.
#[derive(Debug, PartialEq, Eq, Copy, Clone)]
pub enum StateChange {
	/// No change.
	None,

	/// Changes it to the given state, statically determinable.
	Static(MmuState),

	/// Changes it, but in a way that cannot be statically determined.
	Dynamic,
}

impl StateChange {
	pub fn is_none(&self) -> bool { *self == StateChange::None }
	pub fn is_some(&self) -> bool { !self.is_none() }
}

/// Trait for MMUs (memory management units), which abstract the VA-to-Location mapping.
///
/// The "MMU" broadly means "the hardware that decides what physical device a given virtual
/// address refers to." This can be built into a system (hardwired), or the system might
/// have registers to do banking, or the cartridges might have hardware to do that.
#[enum_dispatch(Mmu)]
pub trait IMmu: Debug + Display + Sync + Send {
	/// Get the initial configuration state of this MMU.
	fn initial_state(&self) -> MmuState;

	/// Given a particular configuration state and VA, get the Location it refers to, if any.
	fn loc_for_va(&self, state: MmuState, va: VA) -> Option<Location>;

	/// Given a particular configuration state and Location, get the VA that corresponds to it,
	/// if any.
	fn va_for_loc(&self, state: MmuState, loc: Location) -> Option<VA>;

	/// Come up with an autogenerated name prefix for a given VA.
	fn name_prefix_for_va(&self, state: MmuState, va: VA) -> String;

	/// Given an instruction, tells how that instruction changes the state.
	fn inst_state_change(&self, state: MmuState, inst: &Instruction) -> StateChange;

	/// Given an old state, a value to write, and an address to write it, produce the new MMU
	/// state that would result from such a write.
	fn write(&self, old: MmuState, addr: VA, val: usize) -> MmuState;
}