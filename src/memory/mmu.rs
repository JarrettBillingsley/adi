
use std::fmt::{ Debug, Display };

use crate::memory::{ VA, SegId };

/// Trait for MMUs (memory management units), which abstract the VA-to-segment mapping.
///
/// The "MMU" broadly means "the hardware that decides what physical device a given virtual
/// address refers to." This can be built into a system (hardwired), or the system might
/// have registers to do banking, or the cartridges might have hardware to do that.
pub trait IMmu: Debug + Display + Sync + Send {
	/// The type that holds the configuration state.
	type TState: IMmuState;

	/// Get the initial configuration state of this MMU.
	fn initial_state(&self) -> Self::TState;

	/// Given a particular configuration state, get the segment which contains the given
	/// VA, or None if none does.
	fn segid_for_va(&self, state: Self::TState, va: VA) -> Option<SegId>;

	/// Come up with an autogenerated name prefix for a given VA.
	fn name_prefix_for_va(&self, state: Self::TState, va: VA) -> String;
}

/// A particular configuration of the MMU.
pub trait IMmuState: Debug + Display + Sync + Send {
	// ?
}