
use crate::program::{ MemAccess, AccessKind };
use super::{ InstDesc, Opcode, MetaOp, AddrMode };

// ------------------------------------------------------------------------------------------------
// InstDesc table
// ------------------------------------------------------------------------------------------------

pub fn lookup_desc(opcode: u8) -> InstDesc {
	INST_DESCS[opcode as usize]
}

use Opcode::*;
use MetaOp::*;
use AddrMode::*;
use MemAccess::*;
use AccessKind::*;

const OP_INVALID: InstDesc = InstDesc::new(INVALID, UNK, IMP, None);

const INST_DESCS: &[InstDesc] = &[
	// 0x00
	InstDesc::new(BRK_IMP, BRK,  IMP, None),
	InstDesc::new(ORA_IZX, ORA,  IZX, Calculated(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(ORA_ZPG, ORA,  ZPG, Direct(R)),
	InstDesc::new(ASL_ZPG, ASL,  ZPG, Direct(RW)),
	OP_INVALID,
	InstDesc::new(PHP_IMP, PHP,  IMP, None),
	InstDesc::new(ORA_IMM, ORA,  IMM, None),
	InstDesc::new(ASL_IMP, ASLA, IMP, None),
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(ORA_ABS, ORA,  ABS, Direct(R)),
	InstDesc::new(ASL_ABS, ASL,  ABS, Direct(RW)),
	OP_INVALID,

	// 0x10
	InstDesc::new(BPL_REL, BPL,  REL, Target),
	InstDesc::new(ORA_IZY, ORA,  IZY, Direct(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(ORA_ZPX, ORA,  ZPX, Calculated(R)),
	InstDesc::new(ASL_ZPX, ASL,  ZPX, Calculated(RW)),
	OP_INVALID,
	InstDesc::new(CLC_IMP, CLC,  IMP, None),
	InstDesc::new(ORA_ABY, ORA,  ABY, Calculated(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(ORA_ABX, ORA,  ABX, Calculated(R)),
	InstDesc::new(ASL_ABX, ASL,  ABX, Calculated(RW)),
	OP_INVALID,

	// 0x20
	InstDesc::new(JSR_LAB, JSR,  LAB, Target),
	InstDesc::new(AND_IZX, AND,  IZX, Calculated(R)),
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(BIT_ZPG, BIT,  ZPG, Direct(R)),
	InstDesc::new(AND_ZPG, AND,  ZPG, Direct(R)),
	InstDesc::new(ROL_ZPG, ROL,  ZPG, Direct(RW)),
	OP_INVALID,
	InstDesc::new(PLP_IMP, PLP,  IMP, None),
	InstDesc::new(AND_IMM, AND,  IMM, None),
	InstDesc::new(ROL_IMP, ROLA, IMP, None),
	OP_INVALID,
	InstDesc::new(BIT_ABS, BIT,  ABS, Direct(R)),
	InstDesc::new(AND_ABS, AND,  ABS, Direct(R)),
	InstDesc::new(ROL_ABS, ROL,  ABS, Direct(RW)),
	OP_INVALID,

	// 0x30
	InstDesc::new(BMI_REL, BMI,  REL, Target),
	InstDesc::new(AND_IZY, AND,  IZY, Direct(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(AND_ZPX, AND,  ZPX, Calculated(R)),
	InstDesc::new(ROL_ZPX, ROL,  ZPX, Calculated(RW)),
	OP_INVALID,
	InstDesc::new(SEC_IMP, SEC,  IMP, None),
	InstDesc::new(AND_ABY, AND,  ABY, Calculated(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(AND_ABX, AND,  ABX, Calculated(R)),
	InstDesc::new(ROL_ABX, ROL,  ABX, Calculated(RW)),
	OP_INVALID,

	// 0x40
	InstDesc::new(RTI_IMP, RTI,  IMP, None),
	InstDesc::new(EOR_IZX, EOR,  IZX, Calculated(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(EOR_ZPG, EOR,  ZPG, Direct(R)),
	InstDesc::new(LSR_ZPG, LSR,  ZPG, Direct(RW)),
	OP_INVALID,
	InstDesc::new(PHA_IMP, PHA,  IMP, None),
	InstDesc::new(EOR_IMM, EOR,  IMM, None),
	InstDesc::new(LSR_IMP, LSRA, IMP, None),
	OP_INVALID,
	InstDesc::new(JMP_LAB, JMP,  LAB, Target),
	InstDesc::new(EOR_ABS, EOR,  ABS, Direct(R)),
	InstDesc::new(LSR_ABS, LSR,  ABS, Direct(RW)),
	OP_INVALID,

	// 0x50
	InstDesc::new(BVC_REL, BVC,  REL, Target),
	InstDesc::new(EOR_IZY, EOR,  IZY, Direct(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(EOR_ZPX, EOR,  ZPX, Calculated(R)),
	InstDesc::new(LSR_ZPX, LSR,  ZPX, Calculated(RW)),
	OP_INVALID,
	InstDesc::new(CLI_IMP, CLI,  IMP, None),
	InstDesc::new(EOR_ABY, EOR,  ABY, Calculated(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(EOR_ABX, EOR,  ABX, Calculated(R)),
	InstDesc::new(LSR_ABX, LSR,  ABX, Calculated(RW)),
	OP_INVALID,

	// 0x60
	InstDesc::new(RTS_IMP, RTS,  IMP, None),
	InstDesc::new(ADC_IZX, ADC,  IZX, Calculated(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(ADC_ZPG, ADC,  ZPG, Direct(R)),
	InstDesc::new(ROR_ZPG, ROR,  ZPG, Direct(RW)),
	OP_INVALID,
	InstDesc::new(PLA_IMP, PLA,  IMP, None),
	InstDesc::new(ADC_IMM, ADC,  IMM, None),
	InstDesc::new(ROR_IMP, RORA, IMP, None),
	OP_INVALID,
	InstDesc::new(JMP_IND, JMP,  IND, Direct(R)), // TODO: has an implicit Target
	InstDesc::new(ADC_ABS, ADC,  ABS, Direct(R)),
	InstDesc::new(ROR_ABS, ROR,  ABS, Direct(RW)),
	OP_INVALID,

	// 0x70
	InstDesc::new(BVS_REL, BVS,  REL, Target),
	InstDesc::new(ADC_IZY, ADC,  IZY, Direct(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(ADC_ZPX, ADC,  ZPX, Calculated(R)),
	InstDesc::new(ROR_ZPX, ROR,  ZPX, Calculated(RW)),
	OP_INVALID,
	InstDesc::new(SEI_IMP, SEI,  IMP, None),
	InstDesc::new(ADC_ABY, ADC,  ABY, Calculated(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(ADC_ABX, ADC,  ABX, Calculated(R)),
	InstDesc::new(ROR_ABX, ROR,  ABX, Calculated(RW)),
	OP_INVALID,

	// 0x80
	OP_INVALID,
	InstDesc::new(STA_IZX, STA,  IZX, Calculated(R)), // TODO: implicit indirect write
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(STY_ZPG, STY,  ZPG, Direct(W)),
	InstDesc::new(STA_ZPG, STA,  ZPG, Direct(W)),
	InstDesc::new(STX_ZPG, STX,  ZPG, Direct(W)),
	OP_INVALID,
	InstDesc::new(DEY_IMP, DEY,  IMP, None),
	OP_INVALID,
	InstDesc::new(TXA_IMP, TXA,  IMP, None),
	OP_INVALID,
	InstDesc::new(STY_ABS, STY,  ABS, Direct(W)),
	InstDesc::new(STA_ABS, STA,  ABS, Direct(W)),
	InstDesc::new(STX_ABS, STX,  ABS, Direct(W)),
	OP_INVALID,

	// 0x90
	InstDesc::new(BCC_REL, BCC,  REL, Target),
	InstDesc::new(STA_IZY, STA,  IZY, Direct(R)), // TODO: implicit indirect write
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(STY_ZPX, STY,  ZPX, Calculated(W)),
	InstDesc::new(STA_ZPX, STA,  ZPX, Calculated(W)),
	InstDesc::new(STX_ZPY, STX,  ZPY, Calculated(W)),
	OP_INVALID,
	InstDesc::new(TYA_IMP, TYA,  IMP, None),
	InstDesc::new(STA_ABY, STA,  ABY, Calculated(W)),
	InstDesc::new(TXS_IMP, TXS,  IMP, None),
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(STA_ABX, STA,  ABX, Calculated(W)),
	OP_INVALID,
	OP_INVALID,

	// 0xA0
	InstDesc::new(LDY_IMM, LDYI, IMM, None),
	InstDesc::new(LDA_IZX, LDA,  IZX, Calculated(R)),
	InstDesc::new(LDX_IMM, LDXI, IMM, None),
	OP_INVALID,
	InstDesc::new(LDY_ZPG, LDY,  ZPG, Direct(R)),
	InstDesc::new(LDA_ZPG, LDA,  ZPG, Direct(R)),
	InstDesc::new(LDX_ZPG, LDX,  ZPG, Direct(R)),
	OP_INVALID,
	InstDesc::new(TAY_IMP, TAY,  IMP, None),
	InstDesc::new(LDA_IMM, LDAI, IMM, None),
	InstDesc::new(TAX_IMP, TAX,  IMP, None),
	OP_INVALID,
	InstDesc::new(LDY_ABS, LDY,  ABS, Direct(R)),
	InstDesc::new(LDA_ABS, LDA,  ABS, Direct(R)),
	InstDesc::new(LDX_ABS, LDX,  ABS, Direct(R)),
	OP_INVALID,

	// 0xB0
	InstDesc::new(BCS_REL, BCS,  REL, Target),
	InstDesc::new(LDA_IZY, LDA,  IZY, Direct(R)),
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(LDY_ZPX, LDY,  ZPX, Calculated(R)),
	InstDesc::new(LDA_ZPX, LDA,  ZPX, Calculated(R)),
	InstDesc::new(LDX_ZPY, LDX,  ZPY, Calculated(R)),
	OP_INVALID,
	InstDesc::new(CLV_IMP, CLV,  IMP, None),
	InstDesc::new(LDA_ABY, LDA,  ABY, Calculated(R)),
	InstDesc::new(TSX_IMP, TSX,  IMP, None),
	OP_INVALID,
	InstDesc::new(LDY_ABX, LDY,  ABX, Calculated(R)),
	InstDesc::new(LDA_ABX, LDA,  ABX, Calculated(R)),
	InstDesc::new(LDX_ABY, LDX,  ABY, Calculated(R)),
	OP_INVALID,

	// 0xC0
	InstDesc::new(CPY_IMM, CPY,  IMM, None),
	InstDesc::new(CMP_IZX, CMP,  IZX, Calculated(R)),
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(CPY_ZPG, CPY,  ZPG, Direct(R)),
	InstDesc::new(CMP_ZPG, CMP,  ZPG, Direct(R)),
	InstDesc::new(DEC_ZPG, DEC,  ZPG, Direct(RW)),
	OP_INVALID,
	InstDesc::new(INY_IMP, INY,  IMP, None),
	InstDesc::new(CMP_IMM, CMP,  IMM, None),
	InstDesc::new(DEX_IMP, DEX,  IMP, None),
	OP_INVALID,
	InstDesc::new(CPY_ABS, CPY,  ABS, Direct(R)),
	InstDesc::new(CMP_ABS, CMP,  ABS, Direct(R)),
	InstDesc::new(DEC_ABS, DEC,  ABS, Direct(RW)),
	OP_INVALID,

	// 0xD0
	InstDesc::new(BNE_REL, BNE,  REL, Target),
	InstDesc::new(CMP_IZY, CMP,  IZY, Direct(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(CMP_ZPX, CMP,  ZPX, Calculated(R)),
	InstDesc::new(DEC_ZPX, DEC,  ZPX, Calculated(RW)),
	OP_INVALID,
	InstDesc::new(CLD_IMP, CLD,  IMP, None),
	InstDesc::new(CMP_ABY, CMP,  ABY, Calculated(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(CMP_ABX, CMP,  ABX, Calculated(R)),
	InstDesc::new(DEC_ABX, DEC,  ABX, Calculated(RW)),
	OP_INVALID,

	// 0xE0
	InstDesc::new(CPX_IMM, CPX,  IMM, None),
	InstDesc::new(SBC_IZX, SBC,  IZX, Calculated(R)),
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(CPX_ZPG, CPX,  ZPG, Direct(R)),
	InstDesc::new(SBC_ZPG, SBC,  ZPG, Direct(R)),
	InstDesc::new(INC_ZPG, INC,  ZPG, Direct(RW)),
	OP_INVALID,
	InstDesc::new(INX_IMP, INX,  IMP, None),
	InstDesc::new(SBC_IMM, SBC,  IMM, None),
	InstDesc::new(NOP_IMP, NOP,  IMP, None),
	OP_INVALID,
	InstDesc::new(CPX_ABS, CPX,  ABS, Direct(R)),
	InstDesc::new(SBC_ABS, SBC,  ABS, Direct(R)),
	InstDesc::new(INC_ABS, INC,  ABS, Direct(RW)),
	OP_INVALID,

	// 0xF0
	InstDesc::new(BEQ_REL, BEQ,  REL, Target),
	InstDesc::new(SBC_IZY, SBC,  IZY, Direct(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(SBC_ZPX, SBC,  ZPX, Calculated(R)),
	InstDesc::new(INC_ZPX, INC,  ZPX, Calculated(RW)),
	OP_INVALID,
	InstDesc::new(SED_IMP, SED,  IMP, None),
	InstDesc::new(SBC_ABY, SBC,  ABY, Calculated(R)),
	OP_INVALID,
	OP_INVALID,
	OP_INVALID,
	InstDesc::new(SBC_ABX, SBC,  ABX, Calculated(R)),
	InstDesc::new(INC_ABX, INC,  ABX, Calculated(RW)),
	OP_INVALID,
];